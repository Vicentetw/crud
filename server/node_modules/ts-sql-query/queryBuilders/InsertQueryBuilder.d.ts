import type { SqlBuilder, InsertData, SelectData, QueryColumns } from "../sqlBuilders/SqlBuilder";
import { ITable, IWithView } from "../utils/ITableOrView";
import type { InsertExpression, ExecutableInsertExpression, ExecutableInsert, ExecutableInsertReturning, CustomizableExecutableMultipleInsert, CustomizableExecutableInsertFromSelect, /*, MissingKeysInsertExpression*/ InsertCustomization, CustomizableExecutableInsertReturning, CustomiableExecutableInsert, ComposableExecutableInsert, ComposeExpression, ComposeExpressionDeletingInternalProperty, ComposeExpressionDeletingExternalProperty, ComposableCustomizableExecutableInsert, ExecutableInsertReturningLastInsertedId, InsertColumns } from "../expressions/insert";
import type { Column } from "../utils/Column";
import { database, tableOrView } from "../utils/symbols";
import { AnyValueSource, IExecutableSelectQuery } from "../expressions/values";
import { ComposeSplitQueryBuilder } from "./ComposeSliptQueryBuilder";
export declare class InsertQueryBuilder extends ComposeSplitQueryBuilder implements InsertExpression<any>, ExecutableInsertReturningLastInsertedId<any, any>, ExecutableInsert<any>, ExecutableInsertExpression<any>, CustomizableExecutableMultipleInsert<any>, CustomizableExecutableInsertFromSelect<any>, CustomizableExecutableInsertReturning<any, any>, CustomiableExecutableInsert<any>, /*MissingKeysInsertExpression<any, any>,*/ InsertData, ComposableExecutableInsert<any, any, any>, ComposeExpression<any, any, any, any, any, any>, ComposeExpressionDeletingInternalProperty<any, any, any, any, any, any>, ComposeExpressionDeletingExternalProperty<any, any, any, any, any, any>, ComposableCustomizableExecutableInsert<any, any, any>, ExecutableInsertReturning<any, any, any> {
    [database]: any;
    [tableOrView]: any;
    __table: ITable<any>;
    __sets: {
        [property: string]: any;
    };
    __multiple?: {
        [property: string]: any;
    }[];
    __isMultiple: boolean;
    __idColumn?: Column;
    __from?: SelectData;
    __withs: Array<IWithView<any>>;
    __customization?: InsertCustomization<any>;
    __columns?: QueryColumns;
    __oneColumn?: boolean;
    __query: string;
    __params: any[];
    constructor(sqlBuilder: SqlBuilder, table: ITable<any>);
    executeInsert(min?: number, max?: number): Promise<any>;
    executeInsertNoneOrOne(): Promise<any>;
    executeInsertOne(): Promise<any>;
    executeInsertMany(min?: number, max?: number): Promise<any>;
    query(): string;
    params(): any[];
    dynamicSet(): any;
    set(columns: any): this;
    setIfValue(columns: any): this;
    setIfSet(columns: any): this;
    setIfSetIfValue(columns: any): this;
    setIfNotSet(columns: any): this;
    setIfNotSetIfValue(columns: any): this;
    ignoreIfSet(...columns: any[]): this;
    setIfHasValue(columns: any): this;
    setIfHasValueIfValue(columns: any): this;
    setIfHasNoValue(columns: any): this;
    setIfHasNoValueIfValue(columns: any): this;
    ignoreIfHasValue(...columns: any[]): this;
    ignoreIfHasNoValue(...columns: any[]): this;
    ignoreAnySetWithNoValue(): this;
    values(columns: any): this;
    from(select: IExecutableSelectQuery<any, any, any, any>): this;
    customizeQuery(customization: InsertCustomization<any>): this;
    defaultValues(): this;
    returningLastInsertedId(): this;
    returning(columns: InsertColumns<any>): this;
    returningOneColumn(column: AnyValueSource): this;
}
