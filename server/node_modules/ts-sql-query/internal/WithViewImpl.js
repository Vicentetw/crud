"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithViewImpl = void 0;
const ITableOrView_1 = require("../utils/ITableOrView");
const ColumnImpl_1 = require("../internal/ColumnImpl");
const symbols_1 = require("../utils/symbols");
const values_1 = require("../expressions/values");
class WithViewImpl {
    constructor(name, selectData) {
        // @ts-ignore
        this.__type = 'with';
        this.__name = name;
        this.__selectData = selectData;
        if (selectData.__subSelectUsing) {
            this.__hasExternalDependencies = selectData.__subSelectUsing.length > 0;
        }
        const columns = selectData.__columns;
        (0, ColumnImpl_1.createColumnsFrom)(columns, this, this);
    }
    as(as) {
        const result = new WithViewImpl(this.__name, this.__selectData);
        result.__as = as;
        result.__originalWith = this;
        return result;
    }
    forUseInLeftJoin() {
        return this.forUseInLeftJoinAs('');
    }
    forUseInLeftJoinAs(as) {
        const result = new WithViewImpl(this.__name, this.__selectData);
        result.__as = as;
        result.__forUseInLeftJoin = true;
        result.__originalWith = this;
        for (const prop in result) {
            const column = (0, values_1.__getValueSourceOfObject)(result, prop);
            if (column) {
                const columnPrivate = (0, values_1.__getValueSourcePrivate)(column);
                if (columnPrivate.__optionalType === 'required') {
                    columnPrivate.__optionalType = 'originallyRequired';
                }
            }
        }
        return result;
    }
    __addWiths(withs) {
        if (this.__ignoreWith) {
            return;
        }
        if (this.__originalWith) {
            this.__originalWith.__addWiths(withs);
        }
        else if (!withs.includes(this)) {
            withs.push(this);
        }
        (0, ITableOrView_1.__addWiths)(this.__template, withs);
    }
    __registerTableOrView(requiredTablesOrViews) {
        requiredTablesOrViews.add(this);
        (0, ITableOrView_1.__registerTableOrView)(this.__template, requiredTablesOrViews);
    }
    __registerRequiredColumn(requiredColumns, onlyForTablesOrViews) {
        (0, ITableOrView_1.__registerRequiredColumn)(this.__template, requiredColumns, onlyForTablesOrViews);
    }
    __getOldValues() {
        return undefined;
    }
}
exports.WithViewImpl = WithViewImpl;
