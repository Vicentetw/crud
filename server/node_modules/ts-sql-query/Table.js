"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const values_1 = require("./expressions/values");
const ITableOrView_1 = require("./utils/ITableOrView");
const ColumnImpl_1 = require("./internal/ColumnImpl");
const symbols_1 = require("./utils/symbols");
class TableOf {
    constructor(name) {
        // @ts-ignore
        this.__type = 'table';
        this.__name = name;
    }
    as(as) {
        const result = new (this.constructor)();
        result.__as = as;
        return result;
    }
    forUseInLeftJoin() {
        return this.forUseInLeftJoinAs('');
    }
    forUseInLeftJoinAs(as) {
        const result = new (this.constructor)();
        result.__as = as;
        result.__forUseInLeftJoin = true;
        for (const prop in result) {
            const column = (0, values_1.__getValueSourceOfObject)(result, prop);
            if (column) {
                const columnPrivate = (0, values_1.__getValueSourcePrivate)(column);
                if (columnPrivate.__optionalType === 'required') {
                    columnPrivate.__optionalType = 'originallyRequired';
                }
            }
        }
        return result;
    }
    oldValues() {
        const result = new (this.constructor)();
        result.__as = '_old_';
        result.__oldValues = true;
        return result;
    }
    column(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2);
        }
        return new ColumnImpl_1.ColumnImpl(this, name, type, adapter);
    }
    optionalColumn(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return (new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumn();
        }
        return (new ColumnImpl_1.ColumnImpl(this, name, type, adapter)).__asOptionalColumn();
    }
    columnWithDefaultValue(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return (new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2)).__asColumnWithDefaultValue();
        }
        return (new ColumnImpl_1.ColumnImpl(this, name, type, adapter)).__asColumnWithDefaultValue();
    }
    optionalColumnWithDefaultValue(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return (new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumnWithDefaultValue();
        }
        return (new ColumnImpl_1.ColumnImpl(this, name, type, adapter)).__asOptionalColumnWithDefaultValue();
    }
    autogeneratedPrimaryKey(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return (new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2)).__asAutogeneratedPrimaryKey();
        }
        return (new ColumnImpl_1.ColumnImpl(this, name, type, adapter)).__asAutogeneratedPrimaryKey();
    }
    primaryKey(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return (new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2)).__asPrimaryKey();
        }
        return (new ColumnImpl_1.ColumnImpl(this, name, type, adapter)).__asPrimaryKey();
    }
    autogeneratedPrimaryKeyBySequence(name, sequenceName, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return (new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2)).__asAutogeneratedPrimaryKeyBySequence(sequenceName);
        }
        return (new ColumnImpl_1.ColumnImpl(this, name, type, adapter)).__asAutogeneratedPrimaryKeyBySequence(sequenceName);
    }
    computedColumn(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2).__asComputedColumn();
        }
        return new ColumnImpl_1.ColumnImpl(this, name, type, adapter).__asComputedColumn();
    }
    optionalComputedColumn(name, type, adapter, adapter2) {
        if (typeof adapter === 'string') {
            return (new ColumnImpl_1.ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumn().__asOptionalComputedColumn();
        }
        return (new ColumnImpl_1.ColumnImpl(this, name, type, adapter)).__asOptionalColumn().__asOptionalComputedColumn();
    }
    // @ts-ignore
    __addWiths(withs) {
        (0, ITableOrView_1.__addWiths)(this.__template, withs);
    }
    // @ts-ignore
    __registerTableOrView(requiredTablesOrViews) {
        requiredTablesOrViews.add(this);
        (0, ITableOrView_1.__registerTableOrView)(this.__template, requiredTablesOrViews);
    }
    // @ts-ignore
    __registerRequiredColumn(requiredColumns, onlyForTablesOrViews) {
        (0, ITableOrView_1.__registerRequiredColumn)(this.__template, requiredColumns, onlyForTablesOrViews);
    }
    // @ts-ignore
    __getOldValues() {
        if (this.__oldValues) {
            return this;
        }
        return undefined;
    }
}
class Table extends TableOf {
    constructor(name) {
        super(name);
    }
}
exports.Table = Table;
