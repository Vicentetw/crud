import { AnyValueSource } from './expressions/values';
export type { DynamicCondition, TypeSafeDynamicCondition } from './expressions/dynamicConditionUsingFilters';
export declare type Pickable = {
    [key: string]: AnyValueSource | Pickable;
};
export declare type DynamicPick<Type extends Pickable, Mandatory extends keyof Type = never> = Omit<{
    [P in keyof Type]?: Type[P] extends AnyValueSource ? boolean : Type[P] extends Pickable ? boolean | DynamicPick<Type[P]> : never;
}, Mandatory>;
declare type PickWithMandatories<Type extends Pickable, Mandatory extends keyof Type = never> = {
    [P in Exclude<keyof Type, Mandatory>]?: Type[P] extends AnyValueSource ? Type[P] : Type[P] extends Pickable ? PickWithMandatories<Type[P]> : never;
} & {
    [Q in Mandatory]: Type[Q];
};
export declare function dynamicPick<Type extends Pickable, Mandatory extends keyof Type = never>(obj: Type, pick: DynamicPick<Type>, mandatory?: Mandatory[]): {
    [P in keyof PickWithMandatories<Type, Mandatory>]: PickWithMandatories<Type, Mandatory>[P];
};
